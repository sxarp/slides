doctype html
html
  head
    title= "ブロック構文はいいぞ#{Time.now}"
    meta name="author" content="sxarp" charset="utf-8"
    meta name="viewport" content="width=device-width initial-scale=1.0 maximum-scale=1.0 user-scalable=no"
		meta name="apple-mobile-web-app-capable" content="yes"
		meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"
    link rel="stylesheet" href="css/reveal.css"
    link rel="stylesheet" href="css/theme/sky.css" id="theme"
    link rel="stylesheet" href="lib/css/zenburn.css"
    script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML"
    script type="text/x-mathjax-config"
      |
        MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
          }
         });
  body
    div class="reveal"
      div class="slides"
        section
          br
          br
          h2 ブロック構文はいいぞ〜
          br
          h3 目の前の問題の背後にある一般的な問題を解くと良いことがあるかも？
        section
          h3 お前誰よ(自己紹介)
          br
          ul
            li 名前はsxarpでｵﾅｼｬｽ
            li ネット上では匿名掲示板上で活動してたので最近まで名前が無かった…
            li twitterもやってなかった(最近始めた@_sxarp)
            li
              | いつもは4chanという海外の画像掲示板にいます
              ul
                li ちな、ごちうさすれによく張り付いてます(クッソどうでもいい情報)
        section
          h3 技術的興味/バックグラウンド
          br
          ul
            li
              | 元はPythonばかり書いてました
              ul
                li 機械学習系の研究室にいたので
            li Elixirに釣られて今の会社に
            li でもRailsはちゃんと使えるようになりたいので今はRubyでお仕事
            li
              | 最近Haskellを勉強中(某Hな本で)
              ul
                li そろそろmonadが何なのか分かりそう(願望)
        section
          h3 今日の発表の大まかな流れ
          br
          p ブロックを受け取る関数を自作すると便利だよという話をします
          ul
            li
              | ブロック構文の簡単な説明
              ul
                li Rubyでの使い方/作り方
            li
              | ブロック構文/ブロックを受け取る関数について考察
              ul
                li 普通の関数との違い
                li どんなときに使うのが良いか?
            li 仕事でブロックを受け取る関数を自作したらわりと捗った話
          h4
          h4 スライド: https://sxarp.github.io/slides/ruby_block
        section
          h3 ブロック構文の簡単な説明(使い方)
          br
          p
            | ブロック構文は普段からよく使ってるかと思います、例えばArray#eachとか:
          pre
            code
              |[1, 2, 3].each do |item|
                  puts item
               end
        section
          h3 ブロック構文の簡単な説明(作り方)
          br
          p 
            | 逆にブロックを受け取るeachみたいなメソッドは以下のように作れます。
            | 引数の定義にProcオブジェクトを使うだけOKです。
          pre
            code
              |
               def each(&do_something_block)
                   for index in 0..(self.length)
                      item = self[index]
                      do_something_block.call(item)
                   end
               end
        section
          h3 で、ブロック構文って結局何なのさ？
          br
          p なんの役に立つ？
          ul
            li 共通ロジックを取り出すことでDRYにできる
            ul
              li 例えばArray#eachは配列の各要素に個別に処理をするというロジックを抽出したもの
              li eachを使えば各要素への処理だけ書けば良く、イタレーション部分のロジックは書かなくて良い
          h4
          h4 普通の関数とは何が違うのか？ 共通ロジックの抽出という目的は関数も同じだけれど...
        section
          h3 ブロックを受け取る関数と普通の関数との違い
          p 普通の関数とブロックを受け取る関数では、抽出するロジックの階層が異なります。
          p ここでいう階層とは以下のような入れ子構造のことです：
          pre
            code
              |
               上の階層のロジック {
                     下の階層のロジック
               }
          h6
          h4 上の階層のロジックによって下の階層のロジックが呼び出されます

        section
          h3 階層構造の具体例
          p たとえば以下の例だと：
          pre
            code
              |if x > 100
                   puts x+1
               end
          p 上の階層のロジック:
          pre
            code
              |if x > 100
                   ....
               end
          p 下の階層のロジック:
          pre
            code
              | puts x+1
        section
          h3 ブロックを受け取る関数と普通の関数との違い
          p 下の階層を抽出するのが普通の関数
          pre
            code
              |def puts_x_plus_one(x)
                   puts x+1
               end
          p 上の階層を抽出するのがブロックを受け取る関数
          pre
            code
              |def do_something_when_over_100(x,  &block)
                   block.call(x) if x > 100
               end
        section
          h3 上の階層を抽出すると何がうれしい？
          br
          ul
            li
              | 目の前の問題に固有なロジックに集中できる
              ul
                li 下の階層のロジックだけ書けば良い、共通ロジック(上の階層)を書かなくて良い
                li 簡易的なDSLと呼べるかも
            li
              | コードの抽象度を高められる
              ul
                li 下の階層のロジックを切り替えることで色んな問題に適用できる
                li 仕様の変更や追加に強い
        section
          h3 最後に最近ブロック構文を使った話
          p ２つの配列から条件にマッチしたペアを抽出していくという(上の階層の)ロジックをブロック構文として実装しました
          h4 
            a href='https://github.com/sxarp/matching_array/blob/master/matching_array.rb' コードはこんな感じです。
          h4
          p どんなふうに使った？
          ul
            li 目的としては２つのバラバラに管理されてたモデルを一対一に対応付けたい
            li 具体的には、キャラクターのモデルと図鑑のページのモデルを論理的に紐付けたい(大嘘)
        section
          h3 対応ペアを抽出するコードの様子
          p MatchingArray#matchというメソッドを使うことで、色んな条件でのペアの抽出が簡単にできる：
          pre
            code style="font-size: 80%; line-height: 100%;"
              |
               #キャラクターとページの入った配列からMatcingArrayを作る
               characters =  MatchingArray.new(characters)
               pages  = MatchingArray.new(pages)
               matched_pairs = [] # 対応が付いたペアを逐一突っ込んでいく配列 

               matched_pairs.concat(characters.match(pages)  do  |char,  page|
                   char.name  ==  page.title # キャラ名とページ名が一致してたらペア
               end)
               matched_pairs.concat(characters.match(pages)  do  |char,  page|
                   #名前で対応付かないのは生成時期を見て対応付け
                   char.created_at.month  ==  page.created_at.month
               end)
               matched_pairs.concat(characters.match(pages)  do  |char,  page|
                   char.id == 50 && page.id == 100 #最後の手段でidで直接対応付け
               end)
        section
          h3 MatchingArrayを作ると何が良かった？
          br
          p 何らかの条件でペアを抽出するという汎用的な(ブロックを受け取る)関数を最初に作った結果、どんな抽出条件でも後から簡単に追加できた
        section
          h3 まとめ：ブロック構文はいいぞ
          br
          p ブロックを受け取る関数を使って、目の前の問題の背後にあるより一般的な問題を解いておくと、些細な仕様の変更や追加に余裕で対応できるコードが書けていいゾ～これ。
        section
          br
          br
          br
          br
          h2 おわり
    script src="lib/js/head.min.js"
    script src="js/reveal.min.js"
    javascript:
      Reveal.initialize({
      controls: false,
      progress: true,
      history: true,
      theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
      transition: Reveal.getQueryHash().transition || 'linear', // default/cube/page/concave/zoom/linear/none
      // Optional libraries used to extend on reveal.js
      dependencies: [
      { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      { src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
      ]});
    sass:
      section
        pre
          font-size: 90% !important
          margin-top: 20px !important
          margin-bottom: 20px !important
        ul
          font-size: 90% !important
          line-height: 150% !important
        h4
          font-size: 110% !important
          line-height: 150% !important
          text-transform: none !important
          font-family: inherit !important
        h3
          font-family: inherit !important
          text-transform: none !important
        p
          font-size: 108% !important
          text-align: left !important
          line-height: 130% !important
