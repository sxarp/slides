doctype html
html
  head
    title= "ブロック構文はいいぞ#{Time.now}"
    meta name="author" content="sxarp" charset="utf-8"
    meta name="viewport" content="width=device-width initial-scale=1.0 maximum-scale=1.0 user-scalable=no"
		meta name="apple-mobile-web-app-capable" content="yes"
		meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"
    link rel="stylesheet" href="css/reveal.css"
    link rel="stylesheet" href="css/theme/sky.css" id="theme"
    link rel="stylesheet" href="lib/css/zenburn.css"
    script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML"
    script type="text/x-mathjax-config"
      |
        MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
          }
         });
  body
    div class="reveal"
      div class="slides"
        section
          h3 お前誰よ(自己紹介)
          ul
            li 名前はsxarpでｵﾅｼｬｽ
            li ネット上では匿名掲示板上で活動してたので最近まで名前が無かった…
            li twitterもやってなかった(最近始めた@_sxarp)
            li
              | いつもは4chanという海外の画像掲示板にいます
              ul
                li ちな、ごちうさすれによく張り付いてます(クッソどうでもいい情報)
        section
          h3 技術的興味/バックグラウンド
          ul
            li
              | 元はPythonばかり書いてました
              ul
                li 機械学習系の研究室にいたので
            li Elixirに釣られて今の会社に
            li でもRailsはちゃんと使えるようになりたいので今はRubyでお仕事
            li
              | 最近Haskellを勉強中(某Hな本で)
              ul
                li そろそろmonadが何なのか分かりそう(願望)
        section
          h3 今日の発表の大まかな流れ
          h4 ブロックを受け取る関数を自作すると便利だよという話をします
          ul
            li
              | ブロック構文の簡単な説明
              ul
                li Rubyでの使い方/作り方
            li
              | ブロック構文/ブロックを受け取る関数とは何なのか?
              ul
                li 普通の関数との役割の違い
                li どんなときに使うのが良いか?
            li 仕事でブロックを受け取る関数を自作したらわりと捗った話
          h4
          h4 スライド: https://sxarp.github.io/slides/ruby_block
        section
          h3 ブロック構文の簡単な説明(使い方)
          h4
            | ブロック構文は普段からよく使ってるかと思います、例えばArray#eachとか:
          pre
            | <code contenteditable>
              [1, 2, 3].each do |item|
                  puts item
              end
              <code>
        section
          h3 ブロック構文の簡単な説明(作り方)
          h4 逆にブロックを受け取るeachみたいなメソッドも簡単に作れます。 引数の定義にProcオブジェクトを使うだけOKです。
          pre
            | <code contenteditable>
              def each(&do_something_block)
                  for index in 0..(self.length)
                     item = self[index]
                     do_something_block.call(item)
                  end
              end
              <code>
        section
          h2 Pretty Code
          pre
            | <code contenteditable>
              [1, 2, 3].map do |item|
                puts item
              end
              <code>
        section
          h2 てすとてすお
          p aaaaaa
    script src="lib/js/head.min.js"
    script src="js/reveal.min.js"
    javascript:
      Reveal.initialize({
      controls: false,
      progress: true,
      history: true,
      theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
      transition: Reveal.getQueryHash().transition || 'linear', // default/cube/page/concave/zoom/linear/none
      // Optional libraries used to extend on reveal.js
      dependencies: [
      { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      { src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
      ]});
    sass:
      section
        font-style: sans-serif !important
        line-height: 140% !important
        pre
          font-size: 90% !important
        ul
          font-size: 90% !important
          line-height: 150% !important
        h4
          font-size: 110% !important
          line-height: 150% !important
          text-transform: none !important
          font-family: inherit !important
