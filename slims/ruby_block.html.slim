doctype html
html
  head
    title= "ブロック構文はいいぞ"
    meta name="author" content="sxarp" charset="utf-8"
    meta name="viewport" content="width=device-width initial-scale=1.0 maximum-scale=1.0 user-scalable=no"
		meta name="apple-mobile-web-app-capable" content="yes"
		meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"
    link rel="stylesheet" href="css/reveal.css"
    link rel="stylesheet" href="css/theme/sky.css" id="theme"
    link rel="stylesheet" href="lib/css/zenburn.css"
    script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML"
    script type="text/x-mathjax-config"
      |
        MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
          }
         });
  body
    div class="reveal"
      div class="slides"
        section
          br
          br
          h2 ブロック構文はいいぞ〜
          br
          h4 ブロックを受け取る関数を使って一般化された問題を解いておくと捗るかもな話@Meguro.rb
        section
          h3 お前誰よ(自己紹介)
          br
          ul
            li
              | 名前と連絡先
              ul
                li 名前はsxarpでｵﾅｼｬｽ
                li 最近始めたﾂｲｯﾀｰ@_sxarp
            li
              | 趣味とか
              ul
                li いつもは4chanという海外の画像掲示板にいます
                li ちな、ごちうさスレによく張り付いてます(クッソどうでもいい情報)
        section
          h3 技術的興味/バックグラウンド
          br
          ul
            li
              | 前までどんなことやってたか
              ul
                li 元はPythonばかり書いてました
                li 機械学習系の研究室にいたので
            li
              | 今どんなことやってるか
              ul
                li Elixirに釣られて今の会社にジョイン
                li でもRailsはちゃんとマスターしたいので今はRuby書いてます
            li
              | 最近のハマってること
              ul
                li 某Hな本でHaskellを勉強中
                li そろそろmonadが何なのか分かりそう(願望)
        section
          h3 今日の発表の大まかな流れ
          br
          p ブロックを受け取る関数を作ったり使ったりすると便利だよという話をします
          h5
          ul
            li
              | ブロック構文の簡単な説明
              ul
                li Rubyでの使い方/作り方
            li
              | ブロック構文/ブロックを受け取る関数について考察
              ul
                li 普通の関数との違い
                li どんなときに使う/作るのが良いか?
            li 仕事でブロックを受け取る関数を自作したらわりと捗った話
          h4
          h4 スライド: https://sxarp.github.io/slides/ruby_block
        section
          h3 ブロック構文とは
          br
          p
            | ブロック構文は普段からよく使ってるかと思います、例えばArray#eachとか:
          pre
            code
              |[1, 2, 3].each do |item|
                  puts item
               end
        section
          h3 ブロック構文の作り方
          br
          p 
            | 逆にブロックを受け取るeachみたいなメソッドは以下のように作れます。
            | 引数の定義にProcオブジェクトを使うだけOKです。
          pre
            code
              |
               def each(&do_something_block)
                   for index in 0..(self.length)
                      item = self[index]
                      do_something_block.call(item)
                   end
               end
        section
          h3 で、ブロック構文って結局何なのさ？
          br
          p なんの役に立つ？
          ul
            li 共通ロジックを取り出すことでDRYにできる
            ul
              li 例えばArray#eachは配列の各要素に個別に処理をするというロジックを抽出したもの
              li eachを使えば各要素への処理だけ書けば良く、イタレーション部分のロジックは書かなくて良い
          h4
          h4 では、普通の関数とは何が違うのか？ 共通ロジックの抽出という目的は関数も同じだけれど...
        section
          h3 ブロックを受け取る関数と普通の関数との違い
          p 違いとしては、普通の関数とブロックを受け取る関数では、抽出するロジックの階層が異なります
          p ここでいう階層とは以下のような入れ子構造のことです：
          pre
            code
              |
               上の階層のロジック {
                     下の階層のロジック
               }
          h6
          h4 上の階層のロジックによって下の階層のロジックが呼び出される関係にあります

        section
          h3 階層構造の具体例
          p たとえば以下の例だと：
          pre
            code
              |if x > 100
                   puts x+1
               end
          p 上の階層のロジックは:
          pre
            code
              |if x > 100
                   ....
               end
          p 下の階層のロジックは:
          pre
            code
              | puts x+1
        section
          h3 ブロックを受け取る関数と普通の関数との違い
          p 下の階層を抽出するのが普通の関数
          pre
            code
              |def puts_x_plus_one(x)
                   puts x+1
               end
          p 上の階層を抽出するのがブロックを受け取る関数
          pre
            code
              |def do_something_when_over_100(x,  &block)
                   block.call(x) if x > 100
               end
        section
          h3 上の階層を抽出すると何がうれしい？
          br
          ul
            li
              | 目の前の問題に固有なロジックに集中できる
              ul
                li 下の階層のロジックだけ書けばよく、共通ロジック(上の階層)を書かなくてよい
                li 簡易的なDSLと呼べるかも
            li
              | コードの抽象度を高められる
              ul
                li 下の階層のロジックを切り替えることで色んな問題に適用できる
                li 仕様の変更や追加に強い
        section
          h3 最近仕事でブロック構文を使った話
          p やりたいこと
          ul
            li 目的としては２つのバラバラに管理されていたモデルを一対一に対応付けたい
            li 具体的には、キャラクターのモデルと図鑑のページのモデルを論理的に紐付けたい
          br
          p 要件
          ul
            li できるだけ自動化したい
            li そのために<b>色んな条件</b>：名前や生成された時期等で対応ペアを抽出したい
          h4 色んな条件で？ $\rightarrow$ ブロック構文が使えそう
        section
          h3 対応条件をブロックで渡せる関数
          h4 
          p ２つの配列から、ブロックで渡した条件で対応ペアを抽出できるメソッド(#match)を作りました
          p 渡されたブロックがtruthyな値を返すとき、対応ペアとなります:
          pre
            code
              |pairs  =  ours.match(theirs) do |our_item, their_item|
                   specified_condition(our_item, their_item)
               end
          p なお、続けていくつも条件を適用したいので、マッチしたアイテムは逐次にpopしていく仕様です
          h4
            a href='https://github.com/sxarp/matching_array/blob/master/matching_array.rb' 実装コードはこんな感じです
        section
          h3 実際にどんなふうに使ったか
          p まずは名前で対応付け:
          pre
            code
              |
               pairs  =  characters.match(pages)  do  |chara,  page|
                   chara.name  ==  page.title
               end
          p 名前でダメなやつは時期で対応付け:
          pre
            code
              |
               pairs  =  characters.match(pages)  do  |chara,  page|
                   same_month(chara.created_at,  page.created_at)
               end
          p それでもダメなやつはidを直接指定して対応付け:
          pre
            code
              |
               pairs  =  characters.match(pages)  do  |chara,  page|
                   chara.id == 50 && page.id == 100
               end
        section
          h3 #matchを使うと何が良かった？
          br
          p 何らかの条件でペアを抽出するという汎用的な(ブロックを受け取る)関数を作った結果、どんな対応条件でも後から簡単に試したり追加したりできた
          br
          p 未確定な/変動しうる仕様をうまくカバーできる一般的な問題を見つけて解いた結果
        section
          h3 まとめ：ブロック構文はいいぞ
          br
          p ブロックを受け取る関数を使って、良い感じに一般的な問題を解いておくと、些細な仕様の変更や追加には余裕で対応できるコードが書けていいゾ～これ
        section
          br
          br
          br
          br
          h2 おわり
          br
    script src="lib/js/head.min.js"
    script src="js/reveal.min.js"
    javascript:
      Reveal.initialize({
      controls: false,
      progress: true,
      history: true,
      theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
      transition: Reveal.getQueryHash().transition || 'linear', // default/cube/page/concave/zoom/linear/none
      // Optional libraries used to extend on reveal.js
      dependencies: [
      { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      { src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
      ]});
    sass:
      section
        pre
          font-size: 90% !important
          margin-top: 20px !important
          margin-bottom: 20px !important
        ul
          font-size: 90% !important
          line-height: 150% !important
          text-align: left !important
          li
            text-align: left !important
        h4
          font-size: 110% !important
          line-height: 150% !important
          text-transform: none !important
          font-family: inherit !important
        h3
          font-family: inherit !important
          text-transform: none !important
        p
          font-size: 108% !important
          text-align: left !important
          line-height: 130% !important
